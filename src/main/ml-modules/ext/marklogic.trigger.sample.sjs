var uri;

// This sample shows how to call a Corticon decision service from a MarkLogic trigger.
// See https://www.progress.com/corticon-js and https://www.progress.com/corticon/corticon-learning-center
// for more information about Corticon.
//
// Read this blog for the benefits of integrating Corticon.js with MarkLogic:
// https://www.progress.com/blogs/no-code-business-logic-development-for-marklogic-database

// Processing rules for the document created or updated at the current uri.
// We read the document and convert it to JSON object as that's the input format
// for Corticon decision services.
const data = cts.doc(uri).toObject();

// Of course, the data to pass to a decision service could be gathered from multiple documents.
// For example, at this stage, you could read additional documents at various URIs to augment
// the data variable before invoking the decision service.
// Sometimes, it is desirable to read additional documents conditionally within the decision
// service because either it reduces the size of the input payload and/or which additional data
// to access is not known until the rules start executing and computing various values.  This is
// achievable with a service callout (SCO).  You can read more about SCO at
// https://docs.progress.com/bundle/corticon-js-extensions/page/About-Corticon.js-extensions-for-service-callouts.html
// Also, you can get started with a MarkLogic SCO by experimenting with the sample at:
// https://github.com/corticon/corticon.js-samples/tree/master/ServiceCallOut/MarkLogic
// and specifically here: https://github.com/corticon/corticon.js-samples/blob/master/Importable-Rule-Projects/DailyInsurance/_Service%20Callouts%20files/AccessMarkLogicServiceCallout.js

// Now we import the decision service from the Corticon.js bundle.
// This file was generated by Corticon from the rules defined by the modeler.
// The file would typically be located in a MarkLogic database collection.  So, you need to adjust the
// path where your actual decision service is located at.
const decisionService = require("/ext/decisionServiceBundle.js");

// This is the configuration to pass to the decision service execution
// You can change logLevel to 1 to get more debugging output in the server log - this is useful when
// communicating with support about specific problems.
// The serviceCallout section is only used if the decision service uses custom service callout and is
// ignored when it does not use any.
// You can see an example of a service callout at:
// https://github.com/corticon/corticon.js-samples/tree/master/ServiceCallOut/MarkLogic
const configuration = {
    logLevel: 0, executionMetrics: true,
    logFunction: console.log,
    "serviceCallout": {
        "ctsApi": cts,
        "xmdpApi": xdmp,
    }
};

// The decision service is executed in a single call with the data and the configuration
const result = decisionService.execute(data, configuration);

// Error processing.  Before processing the results, you should check if there were
// any exceptions while executing the rules.
// The property result.corticon.status will either contain the string 'error' or 'success'
// for example using if(result.corticon.status === 'error') { ...
// you can access a description of the error like this:
//    result.corticon.description

// You can augment the result payload as you see fit your needs.
// Here and as an example, we simply add the uri of the request input payload.
result['inputPayloadUri'] = uri;


// The results can be used as you see fit.  For example, you could chain a call to a second decision
// service.  Here, we simply write the results directly into a new document in a MarkLogic database.
// Note: The result is a JavaScript object that can be used directly as JSON.
const resultUri = "/ Replace with Your Path / Replace with your document name.json";

// Now we insert the document in a collection
xdmp.documentInsert(uri, result, {
    "collections": ["http://example.com/data/ledger"],
    "permissions": [xdmp.permission("corticonml-reader", "read"), xdmp.permission("corticonml-writer", "update")]
});
